/**
 * SourceApi
 * A Web API for controlling a source.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIVeinApiRequest.h"

namespace OpenAPI {

OAIVeinApiRequest::OAIVeinApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIVeinApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIVeinApiRequest::~OAIVeinApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIVeinApiRequest::~OAIVeinApiRequest()";
}

QMap<QString, QString>
OAIVeinApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIVeinApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIVeinApiRequest::getRawSocket(){
    return socket;
}


void OAIVeinApiRequest::apiV1VeinGetRequest(){
    qDebug() << "/api/v1/Vein/";
    connect(this, &OAIVeinApiRequest::apiV1VeinGet, handler.data(), &OAIVeinApiHandler::apiV1VeinGet);

    
    qint32 entity_id;
    if(socket->queryString().keys().contains("entity_id")){
        fromStringValue(socket->queryString().value("entity_id"), entity_id);
    }
    
    QString component_name;
    if(socket->queryString().keys().contains("component_name")){
        fromStringValue(socket->queryString().value("component_name"), component_name);
    }
    


    emit apiV1VeinGet(entity_id, component_name);
}


void OAIVeinApiRequest::apiV1VeinPostRequest(){
    qDebug() << "/api/v1/Vein/";
    connect(this, &OAIVeinApiRequest::apiV1VeinPost, handler.data(), &OAIVeinApiHandler::apiV1VeinPost);

    
 
    QJsonDocument doc;
    QList<OAIVeinGetRequest> oai_vein_get_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAIVeinGetRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_vein_get_request.append(o);
        }
    }
    

    emit apiV1VeinPost(oai_vein_get_request);
}


void OAIVeinApiRequest::apiV1VeinPutRequest(){
    qDebug() << "/api/v1/Vein/";
    connect(this, &OAIVeinApiRequest::apiV1VeinPut, handler.data(), &OAIVeinApiHandler::apiV1VeinPut);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIVeinSet oai_vein_set;
    ::OpenAPI::fromJsonValue(oai_vein_set, obj);
    

    emit apiV1VeinPut(oai_vein_set);
}



void OAIVeinApiRequest::apiV1VeinGetResponse(const OAIVeinGetResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIVeinApiRequest::apiV1VeinPostResponse(const QList<OAIVeinGetResponse>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIVeinApiRequest::apiV1VeinPutResponse(const OAIProblemDetails& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIVeinApiRequest::apiV1VeinGetError(const OAIVeinGetResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIVeinApiRequest::apiV1VeinPostError(const QList<OAIVeinGetResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIVeinApiRequest::apiV1VeinPutError(const OAIProblemDetails& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIVeinApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIVeinApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
