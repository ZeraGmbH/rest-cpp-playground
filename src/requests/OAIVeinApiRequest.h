/**
 * SourceApi
 * A Web API for controlling a source.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVeinApiRequest_H
#define OAI_OAIVeinApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIProblemDetails.h"
#include "OAIVeinGetRequest.h"
#include "OAIVeinGetResponse.h"
#include "OAIVeinSet.h"
#include <QList>
#include <QString>
#include "OAIVeinApiHandler.h"

namespace OpenAPI {

class OAIVeinApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIVeinApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIVeinApiHandler> handler);
    virtual ~OAIVeinApiRequest();

    void apiV1VeinGetRequest();
    void apiV1VeinPostRequest();
    void apiV1VeinPutRequest();
    

    void apiV1VeinGetResponse(const OAIVeinGetResponse& res);
    void apiV1VeinPostResponse(const QList<OAIVeinGetResponse>& res);
    void apiV1VeinPutResponse(const OAIProblemDetails& res);
    

    void apiV1VeinGetError(const OAIVeinGetResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void apiV1VeinPostError(const QList<OAIVeinGetResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void apiV1VeinPutError(const OAIProblemDetails& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void apiV1VeinGet(qint32 entity_id, QString component_name);
    void apiV1VeinPost(QList<OAIVeinGetRequest> oai_vein_get_request);
    void apiV1VeinPut(OAIVeinSet oai_vein_set);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIVeinApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIVeinApiRequest_H
