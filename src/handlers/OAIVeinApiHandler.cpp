/**
 * SourceApi
 * A Web API for controlling a source.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIVeinApiHandler.h"
#include "OAIVeinApiRequest.h"
#include "veinentrysingleton.h"

namespace OpenAPI {

OAIVeinApiHandler::OAIVeinApiHandler(){

}

OAIVeinApiHandler::~OAIVeinApiHandler(){

}

void OAIVeinApiHandler::apiV1VeinGet(qint32 entity_id, QString component_name) {
    Q_UNUSED(entity_id);
    Q_UNUSED(component_name);
    auto reqObj = qobject_cast<OAIVeinApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        TaskSimpleVeinGetterPtr task = VeinEntrySingleton::getInstance().getFromVein(entity_id, component_name);
        std::shared_ptr<TaskSimpleVeinGetter> taskSharedPtr = std::move(task);


        connect(taskSharedPtr.get(), &TaskTemplate::sigFinish, this, [reqObj, taskSharedPtr, conn](bool ok, int taskId){

            OAIVeinGetResponse res;
            if (ok)
            {
                QVariant ret = taskSharedPtr->getValue();
                if (static_cast<QMetaType::Type>(taskSharedPtr->getValue().type()) == QMetaType::QJsonObject) {
                    QJsonObject jsonObj = QJsonValue::fromVariant(ret).toObject();
                    QJsonDocument doc(jsonObj);
                    QString jsonString = doc.toJson(QJsonDocument::Compact);
                    ret = jsonString;
                }
                res.setReturnInformation(ret.toString());
                res.setType(taskSharedPtr->getValue().typeName());
                res.setStatus(200);
            }
            else
            {
                res.setReturnInformation("Timeout or not existing entity or component");
                res.setType("Invalid");
                res.setStatus(422);
            }

            reqObj->apiV1VeinGetResponse(res);
            disconnect(*conn);
        });
        taskSharedPtr->start();
    }
}

void OAIVeinApiHandler::apiV1VeinPut(OAIVeinSet oai_vein_set) {
    auto reqObj = qobject_cast<OAIVeinApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        TaskSimpleVeinSetterPtr task = VeinEntrySingleton::getInstance().setToVein(oai_vein_set.getEntityId(),oai_vein_set.getComponentName(), oai_vein_set.getNewValue());
        std::shared_ptr<TaskSimpleVeinSetter> taskSharedPtr = std::move(task);

        if (oai_vein_set.getEntityId() == 0)
        {
            OAIProblemDetails res;
            res.setStatus(500);
            res.setDetail("Not allowed: System entity is write protected");
            res.setTitle("Setter command output");
            res.setType("");
            reqObj->apiV1VeinPutResponse(res);
            return;
        }
        else if (!oai_vein_set.is_entity_id_Valid() || !oai_vein_set.is_component_name_Valid() || !oai_vein_set.is_new_value_Valid())
        {
            OAIProblemDetails res;
            res.setStatus(400);
            res.setDetail("Input not valid: Entity Id or Component name");
            res.setTitle("Setter command output");
            res.setType("");
            reqObj->apiV1VeinPutResponse(res);
            return;
        }

        auto conn = std::make_shared<QMetaObject::Connection>();
        *conn = connect(taskSharedPtr.get(), &TaskTemplate::sigFinish, this, [conn, reqObj, taskSharedPtr, oai_vein_set](bool ok, int taskId){
            OAIProblemDetails res;
            if (ok)
                res.setStatus(200);
            else
                res.setStatus(422);

            QString str = "Entity Id: " + QString::number(oai_vein_set.getEntityId()) + " Component name: " + oai_vein_set.getComponentName() + " New Value: " + oai_vein_set.getNewValue();
            res.setDetail(str);
            res.setTitle("Setter command output");
            res.setType("");
            reqObj->apiV1VeinPutResponse(res);
            disconnect(*conn);
        });
        taskSharedPtr->start();
    }
}
}
