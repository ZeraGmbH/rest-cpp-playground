/**
 * SourceApi
 * A Web API for controlling a source.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIVeinApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter(VeinEntryPtr veinEntry) : m_veinEntry(veinEntry) {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){

}

void OAIApiRouter::createApiHandlers() {
    mOAIVeinApiHandler = QSharedPointer<OAIVeinApiHandler>::create(m_veinEntry);
}


void OAIApiRouter::setOAIVeinApiHandler(QSharedPointer<OAIVeinApiHandler> handler){
    mOAIVeinApiHandler = handler;
}

void OAIApiRouter::setUpRoutes() {

    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/Vein/").toLower(), [this](QHttpEngine::Socket *socket) {
        auto reqObj = new OAIVeinApiRequest(socket, mOAIVeinApiHandler);
        reqObj->apiV1VeinGetRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/Vein/").toLower(), [this](QHttpEngine::Socket *socket) {
        auto reqObj = new OAIVeinApiRequest(socket, mOAIVeinApiHandler);
        reqObj->apiV1VeinPostRequest();
    });
    Routes.insert(QString("%1 %2").arg("PUT").arg("/api/v1/Vein/").toLower(), [this](QHttpEngine::Socket *socket) {
        auto reqObj = new OAIVeinApiRequest(socket, mOAIVeinApiHandler);
        reqObj->apiV1VeinPutRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/Vein/rpc/").toLower(), [this](QHttpEngine::Socket *socket) {
        auto reqObj = new OAIVeinApiRequest(socket, mOAIVeinApiHandler);
        reqObj->apiV1VeinRpcPostRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    return false;
}

}
